    // Gulp task runner
var gulp = require('gulp'),
    // Plumber is a gulp error handler
    plumber = require('gulp-plumber'),
    // Renders SASS into CSS
    sass = require('gulp-sass'),
    // Utilitiy to send notifications to terminal
    gutil = require('gulp-util'),
    // Concatinates files
    concat = require('gulp-concat'),
    // Used for injecting headers into generated files
    header = require('gulp-header'),
    // Nunjucks for HTML templating
    nunjucks = require('gulp-nunjucks'),
    // Tidy up the HTML output
    prettify = require('gulp-prettify'),
    // Browser sync so you don't have to keep hitting that refresh button
    browserSync = require('browser-sync').create(),
    // Watch files and run tasks on changes
    watch = require('gulp-watch'),
    // Helper for deleting Files
    del = require('del'),
    // Sanitizes your CSS and adds required vendor prefixes.
    autoprefixer = require('gulp-autoprefixer'),
    // Used for hinting your dodgy JS code.
    jshint = require('gulp-jshint'),
    // Use to nicley style the JS hints
    stylish = require('jshint-stylish'),
    map = require('map-stream'),
    notify = require('gulp-notify');


//Place to store all path/globs required for tooling
var paths = {
  sass: {
    src: './src/assets/sass/*.scss',
    dest: './build/assets/css/',
    watch: ['./src/assets/sass/*.scss', './src/assets/sass/**/*.scss']
  },
  js: {
    src: ['./src/assets/js/modules/*.js', './src/assets/js/main.js'],
    dest: './build/assets/js/',
    watch: ['./src/assets/js/**/*.js', './src/assets/js/*.js']
  },
  html: {
    src: './src/*.html',
    dest: './build/',
    watch : ['./src/*.html', './src/html-partials/*.html']
  },
  fonts: {
    src: './src/assets/fonts/*.{eot,svg,ttf,woff,woff2}',
    dest: './build/assets/fonts/'
  },
  img: {
    src: './src/assets/img/*.{jpg,svg,jpeg,gif,png}',
    dest: './build/assets/img/'
  }
};



var banner = ['/**',
 '* This is a generated file',
 '* DO NOT EDIT THIS FILE DIRECTLY. To edit this file view the README for instructions.',
 '*/',
 ''].join('\n');



//Set the default task for Gulp
gulp.task('default', ['build-assets-watch']);
gulp.task('start-asset-watch', ['build-assets', 'watch', 'browser-sync']);
gulp.task('build-assets', ['sass', 'js', 'html', 'fonts', 'images']);


gulp.task('build', ['clean'], function() {
  gulp.start('build-assets');
});

gulp.task('build-assets-watch', ['clean'], function() {
  gulp.start('start-asset-watch');
});

//Clean out generated files - This will tidy up your build folder if you've deleted items from source.
gulp.task('clean', function(cb) {
  return del(paths.html.dest);
});

//Render SASS to CSS
gulp.task('sass', function(cb) {

  return gulp.src(paths.sass.src)
  .pipe(plumber({
      errorHandler: onError
    }))
  .pipe(sass())
  .pipe(autoprefixer({
    browsers: ['last 2 versions', 'IE 9', 'IE 10'],
    cascade: false
  }))
  .pipe(header(banner))
  .pipe(gulp.dest(paths.sass.dest))
  .pipe(browserSync.stream());

});

// create a task that ensures the `js` task is complete before
// reloading browsers
gulp.task('js-watch', ['js'], browserSync.reload);

//Concat all JS into one file
gulp.task('js', function(cb) {

  return gulp.src(paths.js.src)
  .pipe(plumber({
      errorHandler: onError
    }))
  //Lint the JS Code
  .pipe(jshint('.jshintrc', {fail: true}))
  .pipe(jshint.reporter(stylish))
  .pipe(notify(function (file) {
      if (file.jshint.success) {
        // Don't show something if success
        return false;
      }

      var errors = file.jshint.results.map(function (data) {
        if (data.error) {
          return "(" + data.error.line + ':' + data.error.character + ') ' + data.error.reason;
        }
      }).join("\n");
      
      gutil.beep();
      return {
        title: 'JSHint Fail',
        message: file.relative + " (" + file.jshint.results.length + " errors)\n" + errors
      };
    }))

  //Combine into one file
  .pipe(concat('main.js'))
  .pipe(header(banner))
  .pipe(gulp.dest(paths.js.dest))
  //Reload the browser
  .pipe(browserSync.stream());

});



// create a task that ensures the `html` task is complete before
// reloading browsers
gulp.task('html-watch', ['html'], browserSync.reload);

//Compile HTML files
gulp.task('html', function() {
  gulp.src(paths.html.src)
    .pipe(plumber({
      errorHandler: onError
    }))
    .pipe(nunjucks.compile())
    .pipe(prettify({indent_size: 2}))
    .pipe(gulp.dest(paths.html.dest))
    .pipe(browserSync.stream());
});

gulp.task('fonts-watch', ['fonts'], browserSync.reload);
//Copy fonts to build folder
gulp.task('fonts', function(cb){

  return gulp.src(paths.fonts.src)
  .pipe(gulp.dest(paths.fonts.dest));

});

gulp.task('images-watch', ['images'], browserSync.reload);
//Copy imgs to build folder
gulp.task('images', function(cb){

  return gulp.src(paths.img.src)
  .pipe(gulp.dest(paths.img.dest));

});


//Watch for file changes and run tasks accordigly
gulp.task('watch', function(cb) {

  watch( paths.sass.watch, function() {
    gulp.start('sass');
  });

  watch( paths.js.watch, function(){
    gulp.start('js-watch');
  });

  watch(paths.html.watch, function() {
      gulp.start('html-watch');
  });

  watch(paths.fonts.src, function() {
      gulp.start('fonts-watch');
  });

  watch(paths.img.src, function() {
      gulp.start('images-watch');
  });

});

gulp.task('browser-sync', function() {
  browserSync.init({
      server: {
          baseDir: "./build/"
      }
  });
});


//function to run on any error
var onError = function (err) {

  var args = Array.prototype.slice.call(arguments);

  notify.onError({
    title: 'Compile Error',
    message: '<%= error.message %>'
  }).apply(this, args);

  gutil.beep();
  console.log(err);
  this.emit('end');
};
